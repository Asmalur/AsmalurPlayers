package me.timothy.asmalur.races;

import java.util.Arrays;
import java.util.List;
import org.anjocaido.groupmanager.GroupManager;
import org.anjocaido.groupmanager.data.User;
import org.anjocaido.groupmanager.dataholder.OverloadedWorldHolder;
import org.anjocaido.groupmanager.dataholder.worlds.WorldsHolder;
import org.anjocaido.groupmanager.permissions.AnjoPermissionsHandler;
import org.bukkit.Server;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.server.PluginDisableEvent;
import org.bukkit.event.server.PluginEnableEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.PluginManager;

public class GMHook
  implements Listener
{
  public static GMHook instance;
  private GroupManager groupManager;
  private Plugin plugin;

  public GMHook(Plugin plugin)
  {
    this.plugin = plugin;
    plugin.getServer().getPluginManager().registerEvents(this, plugin);
  }

  @EventHandler(priority=EventPriority.MONITOR)
  public void onPluginEnable(PluginEnableEvent event)
  {
    PluginManager pluginManager = this.plugin.getServer().getPluginManager();
    Plugin GMplugin = pluginManager.getPlugin("GroupManager");

    if ((GMplugin != null) && (GMplugin.isEnabled()))
    {
      this.groupManager = ((GroupManager)GMplugin);
    }
  }

  @EventHandler(priority=EventPriority.MONITOR)
  public void onPluginDisable(PluginDisableEvent event)
  {
    if (this.groupManager != null)
    {
      if (event.getPlugin().getDescription().getName().equals("GroupManager"))
      {
        this.groupManager = null;
      }
    }
  }

  public String getGroup(Player base)
  {
    AnjoPermissionsHandler handler = this.groupManager.getWorldsHolder().getWorldPermissions(base);
    if (handler == null)
    {
      return null;
    }
    return handler.getGroup(base.getName());
  }

  public boolean setGroup(Player base, String group)
  {
    OverloadedWorldHolder handler = this.groupManager.getWorldsHolder().getWorldData(base);
    if (handler == null)
    {
      return false;
    }
    handler.getUser(base.getName()).setGroup(handler.getGroup(group));
    return true;
  }

  public List<String> getGroups(Player base)
  {
    AnjoPermissionsHandler handler = this.groupManager.getWorldsHolder().getWorldPermissions(base);
    if (handler == null)
    {
      return null;
    }
    return Arrays.asList(handler.getGroups(base.getName()));
  }

  public String getPrefix(Player base)
  {
    return getPrefix(base.getName());
  }

  public String getPrefix(String base)
  {
    AnjoPermissionsHandler handler = this.groupManager.getWorldsHolder().getWorldPermissions(base);
    if (handler == null)
    {
      return null;
    }
    return handler.getUserPrefix(base);
  }

  public String getSuffix(Player base)
  {
    AnjoPermissionsHandler handler = this.groupManager.getWorldsHolder().getWorldPermissions(base);
    if (handler == null)
    {
      return null;
    }
    return handler.getUserSuffix(base.getName());
  }

  public boolean hasPermission(Player base, String node)
  {
    AnjoPermissionsHandler handler = this.groupManager.getWorldsHolder().getWorldPermissions(base);
    if (handler == null)
    {
      return false;
    }
    return handler.has(base, node);
  }
}
