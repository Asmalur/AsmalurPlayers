package me.timothy.asmalur.races.api;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import me.timothy.asmalur.races.PeaceZone;
import me.timothy.asmalur.races.Race;
import org.bukkit.Location;
import org.bukkit.Server;
import org.bukkit.World;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;

public class RacesAPI
{
  private static final String DEFAULT_PLAYER_CONFIG = "name: John Doe <timestamp>\nrace: none";
  private static JavaPlugin plugin;
  private static String playersFolder;
  private static List<Race> races;
  private static List<PlayerRaceInfo> players;

  public static PlayerRaceInfo getRaceInfo(String name)
  {
    return getRaceInfo(name, true);
  }

  public static PlayerRaceInfo getRaceInfo(String name, boolean b)
  {
    if ((players == null) || (name == null))
      return null;
    for (PlayerRaceInfo pri : players)
      if ((pri.loreName != null) && (pri.name != null))
      {
        if ((pri.loreName.toLowerCase().equals(name.toLowerCase())) || 
          (pri.name.toLowerCase().equals(name.toLowerCase())))
          return pri;
      }
    return loadRaceInfo(name, b);
  }

  public static PlayerRaceInfo getRaceInfo(Player player)
  {
    return getRaceInfo(player.getName());
  }

  public static Race getRaceByName(String string)
  {
    for (Race r : races) {
      if (r.name.equals(string))
        return r;
    }
    return null;
  }

  public static void load(JavaPlugin plugin, String folder)
  {
    races = new ArrayList();
    players = new ArrayList();
    plugin = plugin;
    playersFolder = folder + "players/";
    File racesFile = new File(folder + "races.yml");
    try
    {
      YamlConfiguration config = YamlConfiguration.loadConfiguration(racesFile);
      Set keys = config.getKeys(false);
      for (String raceName : keys) {
        Race race = new Race();
        race.name = raceName;
        ConfigurationSection raceConfig = config.getConfigurationSection(raceName);
        race.prefix = raceConfig.getString("prefix");
        if (race.prefix == null)
          race.prefix = "";
        race.postprefix = raceConfig.getString("postprefix");
        if (race.postprefix == null)
          race.postprefix = "";
        race.suffix = raceConfig.getString("suffix");
        if (race.suffix == null)
          race.suffix = "";
        race.postsuffix = raceConfig.getString("postsuffix");
        if (race.postsuffix == null)
          race.postsuffix = "";
        race.spawn = loadLocation(raceConfig, "spawn");
        race.peaceZones = new ArrayList();
        if (raceConfig.contains("peacezones")) {
          Set cityNames = raceConfig.getConfigurationSection("peacezones").getKeys(false);
          for (String str : cityNames) {
            PeaceZone pz = new PeaceZone();
            ConfigurationSection cs = raceConfig.getConfigurationSection("peacezones." + str);
            World w = plugin.getServer().getWorld(cs.getString("world"));
            pz.topLeft = loadLocation(cs, w, "topleft");
            pz.botRight = loadLocation(cs, w, "bottomright");
            race.peaceZones.add(pz);
          }
        }
        races.add(race);
      }
    }
    catch (Exception ex) {
      ex.printStackTrace();
      plugin.getLogger().severe("Failed to load races file!");
      plugin.getServer().getPluginManager().disablePlugin(plugin);
    }
  }

  public static Location loadLocation(ConfigurationSection raceConfig, String string)
  {
    World w = plugin.getServer().getWorld(raceConfig.getString(string + ".world"));
    return loadLocation(raceConfig, w, string);
  }

  public static Location loadLocation(ConfigurationSection raceConfig, World w, String string) {
    double x = raceConfig.getDouble(string + ".x");
    double y = raceConfig.getDouble(string + ".y");
    double z = raceConfig.getDouble(string + ".z");
    return new Location(w, x, y, z);
  }

  public static PlayerRaceInfo loadRaceInfo(String name, boolean b)
  {
    if (playersFolder == null)
      return null;
    File f = new File(playersFolder + name + ".yml");
    boolean successFullyRead = false;
    PlayerRaceInfo pri = new PlayerRaceInfo();
    pri.name = name;
    if (f.exists()) {
      try {
        YamlConfiguration config = YamlConfiguration.loadConfiguration(f);
        config.addDefault("name", "John Doe");
        config.addDefault("race", "none");
        pri.loreName = config.getString("name");
        pri.race = getRaceByName(config.getString("race"));
        if (config.contains("prefix")) {
          pri.prefix = config.getString("prefix");
        }
        if (config.contains("postprefix")) {
          pri.postprefix = config.getString("postprefix");
        }
        if (config.contains("suffix")) {
          pri.suffix = config.getString("suffix");
        }
        if (config.contains("postsuffix")) {
          pri.postsuffix = config.getString("postsuffix");
        }
        pri.initConfig = config;
        successFullyRead = true;
        config.save(f);
      } catch (Exception ex) {
        ex.printStackTrace();
      }
    }
    if (!successFullyRead) {
      if (!b)
        return null;
      long ts = System.currentTimeMillis() % 1000L;
      pri.loreName = name;
      pri.race = getRaceByName("none");
      try {
        f.createNewFile();
        BufferedWriter bw = new BufferedWriter(new FileWriter(f));
        bw.write("name: John Doe <timestamp>\nrace: none".replace("<timestamp>", ts));
        bw.close();
        pri.initConfig = YamlConfiguration.loadConfiguration(f);
      } catch (Exception ex) {
        ex.printStackTrace();
      }
    }
    if (pri.initConfig == null) {
      throw new RuntimeException("Loaded invalidely: initConfig null");
    }
    if (b) {
      players.add(pri);
    }
    return pri;
  }

  public static void save(PlayerRaceInfo pri)
  {
    File f = new File(playersFolder + pri.name + ".yml");
    try {
      f.createNewFile();
      YamlConfiguration config = YamlConfiguration.loadConfiguration(f);
      pri.save(config);
      PRISavedEvent priSavedEvent = new PRISavedEvent(config);
      plugin.getServer().getPluginManager().callEvent(priSavedEvent);
      config.save(f);
    } catch (Exception ex) {
      ex.printStackTrace();
      plugin.getLogger().severe("Failed to save '" + pri.name + "' asmalur race info");
    }
  }

  public static void unload(String name)
  {
    PlayerRaceInfo pri = getRaceInfo(name);
    unload(pri);
  }

  public static void unload(PlayerRaceInfo pri)
  {
    players.remove(pri);
  }

  public static boolean clean(PlayerRaceInfo pri)
  {
    return clean(pri, true);
  }

  public static boolean clean(PlayerRaceInfo pri, boolean changes)
  {
    Player p = plugin.getServer().getPlayerExact(pri.name);
    if (changes)
      save(pri);
    if (p == null) {
      unload(pri);
      return true;
    }if (changes)
    {
      pri.apply(p);
    }
    return false;
  }

  public static void delete(String str)
  {
    unload(str);
    File f = new File(playersFolder + str + ".yml");
    if (f.exists())
      f.delete();
  }

  public static List<PlayerRaceInfo> getLoadedPlayerInfo()
  {
    return players;
  }
}
